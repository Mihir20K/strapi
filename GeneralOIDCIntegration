General OIDC Integration

What is Open ID Connect (OIDC) ?

OpenID Connect or OIDC is an identity protocol that utilizes the authorization and authentication mechanisms of OAuth 2.0. 
The OIDC final specification was published on February 26, 2014, and is now widely adopted by many identity providers on the Internet.
OIDC was developed by the OpenID Foundation, which includes companies like Google and Microsoft. 
While OAuth 2.0 is an authorization protocol, OIDC is an identity authentication protocol and may be used to verify the identity of a user to a client service,
also called Relying Party.

A wide variety of clients may use OpenID Connect (OIDC) to identify users, from single-page applications (SPA) to native and mobile apps. 
It may also be used for Single Sign-On (SSO) across applications.
OIDC uses JSON Web Tokens (JWT), HTTP flows and avoids sharing user credentials with services.

OIDC utilizes OAuth 2.0 as an underlying protocol. The principal extensions are a special scope value (“openid”), the use of an extra token (the ID Token, 
which encapsulates the identity claims in JSON format), and the emphasis on authentication rather than authorization. 
Also, in OIDC, the term “flow” is used in place of OAuth2 “grant”.
The OpenID Provider determines the authentication methods available to authenticate users when they sign in to their IdP account and possibly consent to release 
their identity data to the RP. OIDC specs say nothing about the mechanics of user authentication itself.
The IdP can offer single or multiple factors e.g. 

1) Username/password

2) Single-use code delivered out of band, e.g., by SMS or email

3) Code generated by App (OATH, TOTP or HOTP)

4) Biometric via App Federated (e.g., Facebook, GoogleID)

Principles and Definitions in OpenID Connect:

The OIDC provider (generally called the OpenID Provider or Identity Provider or IdP) performs user authentication, user consent, and token issuance.  
The client or service requesting a user’s identity is normally called the Relying Party (RP). It can be, for example, a web application, but also 
a JavaScript application or a mobile app.
Being built on top of OAuth 2.0, OpenID Connect uses tokens to provide a simple identity layer integrated with the underlying authorization framework.
This integration implies the use of the following types of token: 

 ID Token: 
Specific to OIDC, the primary use of this token in JWT format is to provide information about the authentication operation’s outcome.
Upon request, it may provide the identity data describing a user profile. The data about the authentication result and the user profile information are called claims.
The user profile claims may be any data that is pertinent to the Relying Party for identification purposes, such as a persistent ID, email address, name, etc.

 Access Token: 
Defined in OAuth2, this (optional) short lifetime token provides access to specific user resources as defined in the scope values in the request to the
authorization server. 

 Refresh Token :
 Coming from OAuth2 specs, this token is usually long-lived and may be used to obtain new access tokens.
 ID Tokens should be digitally signed to prevent tampering. They may also be encrypted to provide additional privacy, although, in many cases, transport layer
 security (HTTPS) is sufficient. For SPAs and mobile apps, ID Token encryption is not useful, as the decryption key can be discovered easily.


List of OIDC Providers :

Provider       Discovery metadata

Google            JSON

Microsoft         JSON

Yahoo	            JSON

PayPal	          JSON

Amazon	          Not published

SalesForce	      JSON
 
PhantAuth	        JSON

Okta              Provisioned per account

Keycloak and Okta comparsion :

Keycloak is an open source program that allows you to setup a secure single sign on provider. It supports multiple protocols such as SAML 2.0 and OpenID Connect.

Okta is an SSO provider with a network of 7,000+ pre-built integrations that help you securely adopt and deploy SSO to cloud apps in weeks, not months, all 
without building and maintaining the integrations yourself.
Okta can integrate with OpenID Connect applications by acting as an IdP that provides SSO to external applications.
Okta additionally supports MFA prompts to improve your application security.
* The user requests access to a client application
* The application delegates the user authentication and redirects the user to Okta for authentication.
* The application requests a token from Okta to establish the user session.
* Acting as the IdP, Okta uses Multifactor Authentication (MFA) and SSO credentials to authenticate the user. Okta verifies the user, and if successful, 
  prompts the user to grant access to the application.
* If the user grants access, Okta generates an ID token containing the user identity information that the application can access.
  Okta returns the authenticated user to the application

Since both Keycloak and Okta use OAuth 2.0/OIDC, one might be able to use Keycloak in development, and Okta in production.

After implementing OAuth 2.0 / OIDC support in JHipster. It uses Keycloak (in a Docker container) by default, and provides instructions for switching to Okta.
Thanks to the power of Spring Security and Spring Boot, one needs to only override some properties to switch between the two service providers.
